name: Cut Release

on:
  workflow_dispatch:
    inputs:
      release-type:
        description: Release type (major/minor/patch)
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  SOLUTION_NAME: AVnetCore
  PROJECT_NAME: UXAV.AVnet.Core
  CONFIG: Release
  
jobs:
  cut-release:
    name: Create release branch
    runs-on: windows-latest
    steps:
      - name: Exit if release type argument is invalid
        run: exit 1
        if: ${{ github.event.inputs.release-type != 'major' && github.event.inputs.release-type != 'minor' && github.event.inputs.release-type != 'patch' }}
      
      - name: Checkout develop for ${{ github.event.inputs.release-type }} release
        uses: actions/checkout@v2
        if: ${{ github.event.inputs.release-type == 'major' || github.event.inputs.release-type == 'minor' }}
        with:
          ref: develop
          lfs: true

      - name: Checkout main for ${{ github.event.inputs.release-type }} release
        uses: actions/checkout@v2
        if: ${{ github.event.inputs.release-type == 'patch' }}
        with:
          ref: main
          lfs: true

      - name: Create release branch and modify version
        id: create_release
        shell: powershell
        run: |
          $current_version = ./.github/scripts/GetVersionFromAssemblyInfo.ps1 -Path ${{env.PROJECT_NAME}}/Properties/AssemblyInfo.cs
          $new_version = ./.github/scripts/GetNewVersionNumber.ps1 -Version $current_version -Type ${{ github.event.inputs.release-type }}
          echo "VERSION=$new_version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $branch_name="release/${new_version}"
          echo "BRANCH_NAME=$branch_name" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $branch_name | Out-File -FilePath branch_name.txt -Encoding ASCII -NoNewline
          echo "Current version is $current_version"
          echo "New version is $new_version"
          echo "New branch name is $branch_name"
          git config user.name github-actions
          git config user.email github-actions@github.com
          git checkout -b "$branch_name"
          ./.github/scripts/UpdateAssemblyVersion.ps1 -Path ${{env.PROJECT_NAME}}/Properties/AssemblyInfo.cs -Version $new_version
          git commit -a -m "Bump version to ${new_version}"

      - name: Save branch name
        uses: actions/upload-artifact@v3
        with:
          name: branch-name
          path: branch_name.txt
          
      - name: Setup MsBuild
        uses: microsoft/setup-msbuild@v1

      - name: Setup NuGet.exe
        uses: NuGet/setup-nuget@v1.0.5

      - name: Nuget Add Source
        run: nuget sources Add -Name "uxav" -Source https://nuget.pkg.github.com/uxav/index.json -username uxav -password ${{ secrets.GITHUB_TOKEN }} -StorePasswordInClearText

      - name: Restore Nuget Packages
        run: nuget restore ${{env.SOLUTION_NAME}}.sln

      - name: Build
        run: msbuild ${{env.SOLUTION_NAME}}.sln /p:Configuration=${{env.CONFIG}}

      - name: Pack Nuget
        run: nuget pack ${{env.PROJECT_NAME}}/${{env.PROJECT_NAME}}.csproj -Properties Configuration=${{env.CONFIG}}
          
      - name: Push release
        run: git push --set-upstream origin "${{ env.BRANCH_NAME }}"

  create-pull-requests:
    name: Generate PRs into develop/main
    needs: cut-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download branch name artifact
        uses: actions/download-artifact@v3
        with:
          name: branch-name
      
      - name: Checkout branch and get details
        id: get-details
        run: |
          branch_name=`cat branch_name.txt`
          echo "branch name is $branch_name"
          git checkout -b "$branch_name"
          
          # Use --depth to get commits to add to rev-list
          git fetch origin main --depth 100
          git fetch origin develop --depth 100

          main_pr_body=$(git rev-list --oneline $branch_name ^origin/main)
          develop_pr_body=$(git rev-list --oneline $branch_name ^origin/develop)

          echo 'main_pr_body<<END_OF_OUTPUT' >> $GITHUB_ENV
          echo "$main_pr_body" >> $GITHUB_ENV
          echo 'END_OF_OUTPUT' >> $GITHUB_ENV

          echo 'develop_pr_body<<END_OF_OUTPUT' >> $GITHUB_ENV
          echo "$develop_pr_body" >> $GITHUB_ENV
          echo 'END_OF_OUTPUT' >> $GITHUB_ENV

          echo "::set-output name=branch_name::$branch_name"
      
      - name: Create pull request into develop
        uses: repo-sync/pull-request@v2
        with:
          source_branch: ${{ steps.get-details.outputs.branch_name }}
          destination_branch: "develop"
          github_token: ${{ secrets.GITHUB_TOKEN }}
          pr_title: ${{ steps.get-details.outputs.branch_name }}
          pr_body: ${{ env.develop_pr_body }}

      - name: Create pull request into main
        uses: repo-sync/pull-request@v2
        with:
          source_branch: ${{ steps.get-details.outputs.branch_name }}
          destination_branch: "main"
          github_token: ${{ secrets.GITHUB_TOKEN }}
          pr_title: ${{ steps.get-details.outputs.branch_name }}
          pr_body: ${{ env.main_pr_body }}