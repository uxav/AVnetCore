  name: Test Build
  
  on:
    pull_request:
    push:
      branches:
        - develop
        - release/*

  env:
    SOLUTION_NAME: AVnetCore
    PROJECT_NAME: UXAV.AVnet.Core
    CONFIG: Release
    PRERELEASE: false

  jobs:
    build:
      runs-on: windows-latest
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
            lfs: true

        - name: Get version
          shell: powershell
          run: |
            $version = ./.github/scripts/GetVersionFromAssemblyInfo.ps1 -Path ${{env.PROJECT_NAME}}/Properties/AssemblyInfo.cs
            Write-Output "Version is: $version"
            $versionTitle = ./.github/scripts/CreateVersionTitle.ps1 -Version $version
            Write-Output "Version title is: $version"
            echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            
        - name: Create pre-release tag
          if: github.event_name == 'pull_request' && startsWith(github.head_ref, 'release/') && github.base_ref == 'main'
          shell: powershell
          run: |
            $version = ./.github/scripts/CreateAvailablePreReleaseVersion.ps1 -Version ${{ env.VERSION }} -PreReleaseName beta
            Write-Output "Version is: $version"
            $versionTitle = ./.github/scripts/CreateVersionTitle.ps1 -Version $version
            Write-Output "Version title is: $versionTitle"
            echo "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            echo "VERSION_TITLE=$versionTitle" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            echo "PRERELEASE=true" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

        - name: Update AssemblyInfo.cs
          shell: powershell
          run: |
            echo "Updating ${{env.PROJECT_NAME}}/Properties/AssemblyInfo.cs with version: ${{ env.VERSION }}"
            ./.github/scripts/UpdateAssemblyVersion.ps1 -Path ${{env.PROJECT_NAME}}/Properties/AssemblyInfo.cs -Version ${{ env.VERSION }}

        - name: Setup MsBuild
          uses: microsoft/setup-msbuild@v2
          
        - name: Setup NuGet.exe
          uses: NuGet/setup-nuget@v2

        - name: Add Nuget API Key for nuget.org
          run: nuget setapikey ${{ secrets.NUGET_UXAV_API_KEY }}
          
        - name: Nuget Add Source
          run: nuget sources Add -Name "uxav" -Source https://nuget.pkg.github.com/uxav/index.json -username uxav -password ${{ secrets.GITHUB_TOKEN }} -StorePasswordInClearText

        - name: Restore Nuget Packages
          run: nuget restore ${{env.SOLUTION_NAME}}.sln

        - name: Build
          run: msbuild ${{env.SOLUTION_NAME}}.sln /p:Configuration=${{env.CONFIG}}
          
        - name: Pack Nuget
          run: nuget pack ${{env.PROJECT_NAME}}/${{env.PROJECT_NAME}}.csproj -Properties Configuration=${{env.CONFIG}}

        - name: Push generated package to nuget.org
          if: github.event_name == 'pull_request' && startsWith(github.head_ref, 'release/') && github.base_ref == 'main'
          run: nuget push *.nupkg -source https://api.nuget.org/v3/index.json

        - name: Push generated package to GitHub registry
          if: github.event_name == 'pull_request' && startsWith(github.head_ref, 'release/') && github.base_ref == 'main'
          run: nuget push *.nupkg -source "uxav"

        - name: Create Release
          if: github.event_name == 'pull_request' && startsWith(github.head_ref, 'release/') && github.base_ref == 'main'
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: v${{ env.VERSION }}
            release_name: ${{ env.VERSION_TITLE }}
            draft: false
            prerelease: ${{ env.PRERELEASE }}